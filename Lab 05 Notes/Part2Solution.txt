#include <stdio.h>
#include <string.h>
#include <math.h>

#define MAX_SHAPES 50
#define PI 3.141593

typedef struct point_t
{
    double x;
    double y;
    double z;
}point_t;

typedef struct sphere_t
{
    struct point_t center;
    double radius;
    double volume;
}sphere_t;

typedef struct cube_t
{
    struct point_t bottomleftfurthestcorner;
    double side;
    double volume;
}cube_t;

typedef struct cylinder_t
{
    struct point_t basecenter;
    double baseradius;
    double height;
    double volume;
}cylinder_t;

typedef union shape_data_t
{
    struct sphere_t sphere;
    struct cube_t cube;
    struct cylinder_t cylinder;
}shape_data_t;

enum class_t
{
    SPHERE,
    CUBE,
    CYLINDER
};

struct shape_t
{
    enum  class_t type;
    union  shape_data_t shape;
};

int scanShape(FILE *filep,struct  shape_t *objp);
int loadShapes(struct shape_t shapes[]);
void printShape(const struct shape_t *objp);
int hasVolumeGreaterThan(const struct shape_t *objp, double minVol);

int main()
{
    struct shape_t shapes[MAX_SHAPES];
    int numOfShapes = loadShapes(shapes);

    printf("\nShapes:\n");
    for (int i = 0; i < numOfShapes; i++)
        printShape(&shapes[i]);

    double minVol;
    printf("\nEnter minimum volume: ");
    scanf("%lf",&minVol);
    printf("\nThe following shapes have are greater than %.2f:\n",minVol);
    for (int i = 0; i < numOfShapes; i++)
        if (hasVolumeGreaterThan(&shapes[i],minVol))
            printShape(&shapes[i]);

    return 0;
}


int scanShape(FILE* filep, struct shape_t *objp)
{

   struct point_t res;

   char tpi[80];

   if(fscanf(filep,"%s ",tpi) !=EOF) {

       if (strcmp(tpi,"sphere")==0) {
           objp->type = SPHERE;
           objp->shape.sphere;
           fscanf(filep, "%lf %lf %lf %lf\n", &res.x, &res.y, &res.z, &objp->shape.sphere.radius);
           objp->shape.sphere.center = res;
           objp->shape.sphere.volume = objp->shape.sphere.radius*objp->shape.sphere.radius*objp->shape.sphere.radius*((PI*4)/3);

       }

       else if (strcmp(tpi, "cube") == 0) {
           objp->type = CUBE;
           objp->shape.cube;
           fscanf(filep, "%lf %lf %lf %lf\n", &res.x, &res.y, &res.z, &objp->shape.cube.side);
           objp->shape.cube.bottomleftfurthestcorner = res;
           objp->shape.cube.volume= objp->shape.cube.side*objp->shape.cube.side*objp->shape.cube.side;
       }

       else if (strcmp(tpi, "cylinder") == 0) {
           objp->type = CYLINDER;
           objp->shape.cylinder;
           fscanf(filep, "%lf %lf %lf %lf %lf\n", &res.x, &res.y, &res.z,&objp->shape.cylinder.baseradius,&objp->shape.cylinder.height);
           objp->shape.cylinder.basecenter = res;
           objp->shape.cylinder.volume = objp->shape.cylinder.baseradius*objp->shape.cylinder.baseradius*objp->shape.cylinder.height*PI;
       }

       return 1;
   }
   return 0;
}

int loadShapes(struct shape_t shapes[]) {
   int control = 0;
   char filename[50];
   printf("Enter the file name to read: \n");
   scanf("%s", filename);
   FILE* filep = fopen(filename,"r");
   printf("Opening %s\n", filename);
   while (scanShape(filep, &shapes[control]) == 1) {
       control++;
   }
   printf("Loading complete\n");
   printf("Closing %s", filename);
   fclose(filep);
   return control;
}

void printShape(const struct shape_t *objp) {
   if (objp->type==0) {
       printf("%s: <%.2lf %.2lf %.2lf> <%.2lf> V<%.2lf>\n","Sphere", objp->shape.sphere.center.x, objp->shape.sphere.center.y,  objp->shape.sphere.center.z ,objp->shape.sphere.radius, objp->shape.sphere.volume);
   }
   else if (objp->type == 1) {
       printf("%s: <%.2lf %.2lf %.2lf> <%.2lf> V<%.2lf>\n", "Cube", objp->shape.cube.bottomleftfurthestcorner.x, objp->shape.cube.bottomleftfurthestcorner.y,objp->shape.cube.bottomleftfurthestcorner.z , objp->shape.cube.side, objp->shape.cube.volume);
   }
   else if (objp->type == 2) {
       printf("%s: <%.2lf %.2lf %.2lf> <%.2lf> <%.2lf> V<%.2lf>\n","Cylinder", objp->shape.cylinder.basecenter.x, objp->shape.cylinder.basecenter.y,
              objp->shape.cylinder.basecenter.z,
              objp->shape.cylinder.baseradius,
              objp->shape.cylinder.height,objp->shape.cylinder.volume);
   }
}
int hasVolumeGreaterThan(const struct shape_t *objp, double minVol) {
   if(objp->type == 0 && objp->shape.sphere.volume>minVol) {
       return 1;
   }
   else if (objp->type == 1 && objp->shape.cube.volume > minVol) {
       return 1;
   }
   else if (objp->type == 2 && objp->shape.cylinder.volume > minVol) {
       return 1;
   }
   return 0;
}
